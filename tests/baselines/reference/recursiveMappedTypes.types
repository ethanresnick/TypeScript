=== tests/cases/conformance/types/mapped/recursiveMappedTypes.ts ===
// Recursive mapped types simply appear empty

type Recurse = {
>Recurse : any

    [K in keyof Recurse]: Recurse[K]
}

type Recurse1 = {
>Recurse1 : any

    [K in keyof Recurse2]: Recurse2[K]
}

type Recurse2 = {
>Recurse2 : any

    [K in keyof Recurse1]: Recurse1[K]
}

// Repro from #27881

export type Circular<T> = {[P in keyof T]: Circular<T>};
>Circular : Circular<T>

type tup = [number, number, number, number];
>tup : [number, number, number, number]

function foo(arg: Circular<tup>): tup {
>foo : (arg: any) => [number, number, number, number]
>arg : any

  return arg;
>arg : any
}

// Repro from #29442

type DeepMap<T extends unknown[], R> = {
>DeepMap : DeepMap<T, R>

  [K in keyof T]: T[K] extends unknown[] ? DeepMap<T[K], R> : R;
};

type tpl = [string, [string, [string]]];
>tpl : [string, [string, [string]]]

type arr = string[][];
>arr : string[][]

type t1 = DeepMap<tpl, number>;  // [number, [number, [number]]]
>t1 : [number, [number, [number]]]

type t2 = DeepMap<arr, number>;  // number[][]
>t2 : number[][]

// Repro from #29577

type Transform<T> = { [K in keyof T]: Transform<T[K]> };
>Transform : Transform<T>

interface User {
    avatar: string;
>avatar : string
}

interface Guest {
    displayName: string;
>displayName : string
}

interface Product {
    users: (User | Guest)[];
>users : (User | Guest)[]
}

declare var product: Transform<Product>;
>product : Transform<Product>

product.users;  // (Transform<User> | Transform<Guest>)[]
>product.users : (Transform<User> | Transform<Guest>)[]
>product : Transform<Product>
>users : (Transform<User> | Transform<Guest>)[]

// Repro from #29702

type Remap1<T> = { [P in keyof T]: Remap1<T[P]>; };
>Remap1 : Remap1<T>

type Remap2<T> = T extends object ? { [P in keyof T]: Remap2<T[P]>; } : T;
>Remap2 : Remap2<T>
  
type a = Remap1<string[]>;  // string[]
>a : string[]

type b = Remap2<string[]>;  // string[]
>b : string[]

