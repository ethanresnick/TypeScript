=== tests/cases/conformance/types/conditional/conditionalTypes2.ts ===
// #27118: Conditional types are now invariant in the check type.

interface Covariant<T> {
>Covariant : Symbol(Covariant, Decl(conditionalTypes2.ts, 0, 0))
>T : Symbol(T, Decl(conditionalTypes2.ts, 2, 20))

    foo: T extends string ? T : number;
>foo : Symbol(Covariant.foo, Decl(conditionalTypes2.ts, 2, 24))
>T : Symbol(T, Decl(conditionalTypes2.ts, 2, 20))
>T : Symbol(T, Decl(conditionalTypes2.ts, 2, 20))
}

interface Contravariant<T> {
>Contravariant : Symbol(Contravariant, Decl(conditionalTypes2.ts, 4, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 6, 24))

    foo: T extends string ? keyof T : number;
>foo : Symbol(Contravariant.foo, Decl(conditionalTypes2.ts, 6, 28))
>T : Symbol(T, Decl(conditionalTypes2.ts, 6, 24))
>T : Symbol(T, Decl(conditionalTypes2.ts, 6, 24))
}

interface Invariant<T> {
>Invariant : Symbol(Invariant, Decl(conditionalTypes2.ts, 8, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 10, 20))

    foo: T extends string ? keyof T : T;
>foo : Symbol(Invariant.foo, Decl(conditionalTypes2.ts, 10, 24))
>T : Symbol(T, Decl(conditionalTypes2.ts, 10, 20))
>T : Symbol(T, Decl(conditionalTypes2.ts, 10, 20))
>T : Symbol(T, Decl(conditionalTypes2.ts, 10, 20))
}

function f1<A, B extends A>(a: Covariant<A>, b: Covariant<B>) {
>f1 : Symbol(f1, Decl(conditionalTypes2.ts, 12, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 14, 12))
>B : Symbol(B, Decl(conditionalTypes2.ts, 14, 14))
>A : Symbol(A, Decl(conditionalTypes2.ts, 14, 12))
>a : Symbol(a, Decl(conditionalTypes2.ts, 14, 28))
>Covariant : Symbol(Covariant, Decl(conditionalTypes2.ts, 0, 0))
>A : Symbol(A, Decl(conditionalTypes2.ts, 14, 12))
>b : Symbol(b, Decl(conditionalTypes2.ts, 14, 44))
>Covariant : Symbol(Covariant, Decl(conditionalTypes2.ts, 0, 0))
>B : Symbol(B, Decl(conditionalTypes2.ts, 14, 14))

    a = b;  // Error
>a : Symbol(a, Decl(conditionalTypes2.ts, 14, 28))
>b : Symbol(b, Decl(conditionalTypes2.ts, 14, 44))

    b = a;  // Error
>b : Symbol(b, Decl(conditionalTypes2.ts, 14, 44))
>a : Symbol(a, Decl(conditionalTypes2.ts, 14, 28))
}

function f2<A, B extends A>(a: Contravariant<A>, b: Contravariant<B>) {
>f2 : Symbol(f2, Decl(conditionalTypes2.ts, 17, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 19, 12))
>B : Symbol(B, Decl(conditionalTypes2.ts, 19, 14))
>A : Symbol(A, Decl(conditionalTypes2.ts, 19, 12))
>a : Symbol(a, Decl(conditionalTypes2.ts, 19, 28))
>Contravariant : Symbol(Contravariant, Decl(conditionalTypes2.ts, 4, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 19, 12))
>b : Symbol(b, Decl(conditionalTypes2.ts, 19, 48))
>Contravariant : Symbol(Contravariant, Decl(conditionalTypes2.ts, 4, 1))
>B : Symbol(B, Decl(conditionalTypes2.ts, 19, 14))

    a = b;  // Error
>a : Symbol(a, Decl(conditionalTypes2.ts, 19, 28))
>b : Symbol(b, Decl(conditionalTypes2.ts, 19, 48))

    b = a;  // Error
>b : Symbol(b, Decl(conditionalTypes2.ts, 19, 48))
>a : Symbol(a, Decl(conditionalTypes2.ts, 19, 28))
}

function f3<A, B extends A>(a: Invariant<A>, b: Invariant<B>) {
>f3 : Symbol(f3, Decl(conditionalTypes2.ts, 22, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 24, 12))
>B : Symbol(B, Decl(conditionalTypes2.ts, 24, 14))
>A : Symbol(A, Decl(conditionalTypes2.ts, 24, 12))
>a : Symbol(a, Decl(conditionalTypes2.ts, 24, 28))
>Invariant : Symbol(Invariant, Decl(conditionalTypes2.ts, 8, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 24, 12))
>b : Symbol(b, Decl(conditionalTypes2.ts, 24, 44))
>Invariant : Symbol(Invariant, Decl(conditionalTypes2.ts, 8, 1))
>B : Symbol(B, Decl(conditionalTypes2.ts, 24, 14))

    a = b;  // Error
>a : Symbol(a, Decl(conditionalTypes2.ts, 24, 28))
>b : Symbol(b, Decl(conditionalTypes2.ts, 24, 44))

    b = a;  // Error
>b : Symbol(b, Decl(conditionalTypes2.ts, 24, 44))
>a : Symbol(a, Decl(conditionalTypes2.ts, 24, 28))
}

// Extract<T, Function> is a T that is known to be a Function
function isFunction<T>(value: T): value is Extract<T, Function> {
>isFunction : Symbol(isFunction, Decl(conditionalTypes2.ts, 27, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 30, 20))
>value : Symbol(value, Decl(conditionalTypes2.ts, 30, 23))
>T : Symbol(T, Decl(conditionalTypes2.ts, 30, 20))
>value : Symbol(value, Decl(conditionalTypes2.ts, 30, 23))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes2.ts, 30, 20))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    return typeof value === "function";
>value : Symbol(value, Decl(conditionalTypes2.ts, 30, 23))
}

function getFunction<T>(item: T) {
>getFunction : Symbol(getFunction, Decl(conditionalTypes2.ts, 32, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 34, 21))
>item : Symbol(item, Decl(conditionalTypes2.ts, 34, 24))
>T : Symbol(T, Decl(conditionalTypes2.ts, 34, 21))

    if (isFunction(item)) {
>isFunction : Symbol(isFunction, Decl(conditionalTypes2.ts, 27, 1))
>item : Symbol(item, Decl(conditionalTypes2.ts, 34, 24))

        return item;
>item : Symbol(item, Decl(conditionalTypes2.ts, 34, 24))
    }
    throw new Error();
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
}

function f10<T>(x: T) {
>f10 : Symbol(f10, Decl(conditionalTypes2.ts, 39, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 41, 13))
>x : Symbol(x, Decl(conditionalTypes2.ts, 41, 16))
>T : Symbol(T, Decl(conditionalTypes2.ts, 41, 13))

    if (isFunction(x)) {
>isFunction : Symbol(isFunction, Decl(conditionalTypes2.ts, 27, 1))
>x : Symbol(x, Decl(conditionalTypes2.ts, 41, 16))

        const f: Function = x;
>f : Symbol(f, Decl(conditionalTypes2.ts, 43, 13))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))
>x : Symbol(x, Decl(conditionalTypes2.ts, 41, 16))

        const t: T = x;
>t : Symbol(t, Decl(conditionalTypes2.ts, 44, 13))
>T : Symbol(T, Decl(conditionalTypes2.ts, 41, 13))
>x : Symbol(x, Decl(conditionalTypes2.ts, 41, 16))
    }
}

function f11(x: string | (() => string) | undefined) {
>f11 : Symbol(f11, Decl(conditionalTypes2.ts, 46, 1))
>x : Symbol(x, Decl(conditionalTypes2.ts, 48, 13))

    if (isFunction(x)) {
>isFunction : Symbol(isFunction, Decl(conditionalTypes2.ts, 27, 1))
>x : Symbol(x, Decl(conditionalTypes2.ts, 48, 13))

        x();
>x : Symbol(x, Decl(conditionalTypes2.ts, 48, 13))
    }
}

function f12(x: string | (() => string) | undefined) {
>f12 : Symbol(f12, Decl(conditionalTypes2.ts, 52, 1))
>x : Symbol(x, Decl(conditionalTypes2.ts, 54, 13))

    const f = getFunction(x);  // () => string
>f : Symbol(f, Decl(conditionalTypes2.ts, 55, 9))
>getFunction : Symbol(getFunction, Decl(conditionalTypes2.ts, 32, 1))
>x : Symbol(x, Decl(conditionalTypes2.ts, 54, 13))

    f();
>f : Symbol(f, Decl(conditionalTypes2.ts, 55, 9))
}

type Foo = { foo: string };
>Foo : Symbol(Foo, Decl(conditionalTypes2.ts, 57, 1))
>foo : Symbol(foo, Decl(conditionalTypes2.ts, 59, 12))

type Bar = { bar: string };
>Bar : Symbol(Bar, Decl(conditionalTypes2.ts, 59, 27))
>bar : Symbol(bar, Decl(conditionalTypes2.ts, 60, 12))

declare function fooBar(x: { foo: string, bar: string }): void;
>fooBar : Symbol(fooBar, Decl(conditionalTypes2.ts, 60, 27))
>x : Symbol(x, Decl(conditionalTypes2.ts, 62, 24))
>foo : Symbol(foo, Decl(conditionalTypes2.ts, 62, 28))
>bar : Symbol(bar, Decl(conditionalTypes2.ts, 62, 41))

declare function fooBat(x: { foo: string, bat: string }): void;
>fooBat : Symbol(fooBat, Decl(conditionalTypes2.ts, 62, 63))
>x : Symbol(x, Decl(conditionalTypes2.ts, 63, 24))
>foo : Symbol(foo, Decl(conditionalTypes2.ts, 63, 28))
>bat : Symbol(bat, Decl(conditionalTypes2.ts, 63, 41))

type Extract2<T, U, V> = T extends U ? T extends V ? T : never : never;
>Extract2 : Symbol(Extract2, Decl(conditionalTypes2.ts, 63, 63))
>T : Symbol(T, Decl(conditionalTypes2.ts, 65, 14))
>U : Symbol(U, Decl(conditionalTypes2.ts, 65, 16))
>V : Symbol(V, Decl(conditionalTypes2.ts, 65, 19))
>T : Symbol(T, Decl(conditionalTypes2.ts, 65, 14))
>U : Symbol(U, Decl(conditionalTypes2.ts, 65, 16))
>T : Symbol(T, Decl(conditionalTypes2.ts, 65, 14))
>V : Symbol(V, Decl(conditionalTypes2.ts, 65, 19))
>T : Symbol(T, Decl(conditionalTypes2.ts, 65, 14))

function f20<T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) {
>f20 : Symbol(f20, Decl(conditionalTypes2.ts, 65, 71))
>T : Symbol(T, Decl(conditionalTypes2.ts, 67, 13))
>x : Symbol(x, Decl(conditionalTypes2.ts, 67, 16))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes2.ts, 67, 13))
>Foo : Symbol(Foo, Decl(conditionalTypes2.ts, 57, 1))
>Bar : Symbol(Bar, Decl(conditionalTypes2.ts, 59, 27))
>y : Symbol(y, Decl(conditionalTypes2.ts, 67, 49))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes2.ts, 67, 13))
>Foo : Symbol(Foo, Decl(conditionalTypes2.ts, 57, 1))
>Bar : Symbol(Bar, Decl(conditionalTypes2.ts, 59, 27))
>z : Symbol(z, Decl(conditionalTypes2.ts, 67, 75))
>Extract2 : Symbol(Extract2, Decl(conditionalTypes2.ts, 63, 63))
>T : Symbol(T, Decl(conditionalTypes2.ts, 67, 13))
>Foo : Symbol(Foo, Decl(conditionalTypes2.ts, 57, 1))
>Bar : Symbol(Bar, Decl(conditionalTypes2.ts, 59, 27))

    fooBar(x);
>fooBar : Symbol(fooBar, Decl(conditionalTypes2.ts, 60, 27))
>x : Symbol(x, Decl(conditionalTypes2.ts, 67, 16))

    fooBar(y);
>fooBar : Symbol(fooBar, Decl(conditionalTypes2.ts, 60, 27))
>y : Symbol(y, Decl(conditionalTypes2.ts, 67, 49))

    fooBar(z);
>fooBar : Symbol(fooBar, Decl(conditionalTypes2.ts, 60, 27))
>z : Symbol(z, Decl(conditionalTypes2.ts, 67, 75))
}

function f21<T>(x: Extract<Extract<T, Foo>, Bar>, y: Extract<T, Foo & Bar>, z: Extract2<T, Foo, Bar>) {
>f21 : Symbol(f21, Decl(conditionalTypes2.ts, 71, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 73, 13))
>x : Symbol(x, Decl(conditionalTypes2.ts, 73, 16))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes2.ts, 73, 13))
>Foo : Symbol(Foo, Decl(conditionalTypes2.ts, 57, 1))
>Bar : Symbol(Bar, Decl(conditionalTypes2.ts, 59, 27))
>y : Symbol(y, Decl(conditionalTypes2.ts, 73, 49))
>Extract : Symbol(Extract, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(conditionalTypes2.ts, 73, 13))
>Foo : Symbol(Foo, Decl(conditionalTypes2.ts, 57, 1))
>Bar : Symbol(Bar, Decl(conditionalTypes2.ts, 59, 27))
>z : Symbol(z, Decl(conditionalTypes2.ts, 73, 75))
>Extract2 : Symbol(Extract2, Decl(conditionalTypes2.ts, 63, 63))
>T : Symbol(T, Decl(conditionalTypes2.ts, 73, 13))
>Foo : Symbol(Foo, Decl(conditionalTypes2.ts, 57, 1))
>Bar : Symbol(Bar, Decl(conditionalTypes2.ts, 59, 27))

    fooBat(x);  // Error
>fooBat : Symbol(fooBat, Decl(conditionalTypes2.ts, 62, 63))
>x : Symbol(x, Decl(conditionalTypes2.ts, 73, 16))

    fooBat(y);  // Error
>fooBat : Symbol(fooBat, Decl(conditionalTypes2.ts, 62, 63))
>y : Symbol(y, Decl(conditionalTypes2.ts, 73, 49))

    fooBat(z);  // Error
>fooBat : Symbol(fooBat, Decl(conditionalTypes2.ts, 62, 63))
>z : Symbol(z, Decl(conditionalTypes2.ts, 73, 75))
}

// Repro from #22899

declare function toString1(value: object | Function): string ;
>toString1 : Symbol(toString1, Decl(conditionalTypes2.ts, 77, 1))
>value : Symbol(value, Decl(conditionalTypes2.ts, 81, 27))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

declare function toString2(value: Function): string ;
>toString2 : Symbol(toString2, Decl(conditionalTypes2.ts, 81, 62))
>value : Symbol(value, Decl(conditionalTypes2.ts, 82, 27))
>Function : Symbol(Function, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

function foo<T>(value: T) {
>foo : Symbol(foo, Decl(conditionalTypes2.ts, 82, 53))
>T : Symbol(T, Decl(conditionalTypes2.ts, 84, 13))
>value : Symbol(value, Decl(conditionalTypes2.ts, 84, 16))
>T : Symbol(T, Decl(conditionalTypes2.ts, 84, 13))

    if (isFunction(value)) {
>isFunction : Symbol(isFunction, Decl(conditionalTypes2.ts, 27, 1))
>value : Symbol(value, Decl(conditionalTypes2.ts, 84, 16))

        toString1(value);
>toString1 : Symbol(toString1, Decl(conditionalTypes2.ts, 77, 1))
>value : Symbol(value, Decl(conditionalTypes2.ts, 84, 16))

        toString2(value);
>toString2 : Symbol(toString2, Decl(conditionalTypes2.ts, 81, 62))
>value : Symbol(value, Decl(conditionalTypes2.ts, 84, 16))
    }
}

// Repro from #23052

type A<T, V, E> =
>A : Symbol(A, Decl(conditionalTypes2.ts, 89, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))
>V : Symbol(V, Decl(conditionalTypes2.ts, 93, 9))
>E : Symbol(E, Decl(conditionalTypes2.ts, 93, 12))

  T extends object
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))

    ? { [Q in { [P in keyof T]: T[P] extends V ? P : P; }[keyof T]]: A<T[Q], V, E>; }
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 95, 9))
>P : Symbol(P, Decl(conditionalTypes2.ts, 95, 17))
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))
>P : Symbol(P, Decl(conditionalTypes2.ts, 95, 17))
>V : Symbol(V, Decl(conditionalTypes2.ts, 93, 9))
>P : Symbol(P, Decl(conditionalTypes2.ts, 95, 17))
>P : Symbol(P, Decl(conditionalTypes2.ts, 95, 17))
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))
>A : Symbol(A, Decl(conditionalTypes2.ts, 89, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 95, 9))
>V : Symbol(V, Decl(conditionalTypes2.ts, 93, 9))
>E : Symbol(E, Decl(conditionalTypes2.ts, 93, 12))

    : T extends V ? T : never;
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))
>V : Symbol(V, Decl(conditionalTypes2.ts, 93, 9))
>T : Symbol(T, Decl(conditionalTypes2.ts, 93, 7))

type B<T, V> =
>B : Symbol(B, Decl(conditionalTypes2.ts, 96, 30))
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))
>V : Symbol(V, Decl(conditionalTypes2.ts, 98, 9))

  T extends object
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))

    ? { [Q in { [P in keyof T]: T[P] extends V ? P : P; }[keyof T]]: B<T[Q], V>; }
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 100, 9))
>P : Symbol(P, Decl(conditionalTypes2.ts, 100, 17))
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))
>P : Symbol(P, Decl(conditionalTypes2.ts, 100, 17))
>V : Symbol(V, Decl(conditionalTypes2.ts, 98, 9))
>P : Symbol(P, Decl(conditionalTypes2.ts, 100, 17))
>P : Symbol(P, Decl(conditionalTypes2.ts, 100, 17))
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))
>B : Symbol(B, Decl(conditionalTypes2.ts, 96, 30))
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 100, 9))
>V : Symbol(V, Decl(conditionalTypes2.ts, 98, 9))

    : T extends V ? T : never;
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))
>V : Symbol(V, Decl(conditionalTypes2.ts, 98, 9))
>T : Symbol(T, Decl(conditionalTypes2.ts, 98, 7))

type C<T, V, E> =
>C : Symbol(C, Decl(conditionalTypes2.ts, 101, 30))
>T : Symbol(T, Decl(conditionalTypes2.ts, 103, 7))
>V : Symbol(V, Decl(conditionalTypes2.ts, 103, 9))
>E : Symbol(E, Decl(conditionalTypes2.ts, 103, 12))

  { [Q in { [P in keyof T]: T[P] extends V ? P : P; }[keyof T]]: C<T[Q], V, E>; };
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 104, 5))
>P : Symbol(P, Decl(conditionalTypes2.ts, 104, 13))
>T : Symbol(T, Decl(conditionalTypes2.ts, 103, 7))
>T : Symbol(T, Decl(conditionalTypes2.ts, 103, 7))
>P : Symbol(P, Decl(conditionalTypes2.ts, 104, 13))
>V : Symbol(V, Decl(conditionalTypes2.ts, 103, 9))
>P : Symbol(P, Decl(conditionalTypes2.ts, 104, 13))
>P : Symbol(P, Decl(conditionalTypes2.ts, 104, 13))
>T : Symbol(T, Decl(conditionalTypes2.ts, 103, 7))
>C : Symbol(C, Decl(conditionalTypes2.ts, 101, 30))
>T : Symbol(T, Decl(conditionalTypes2.ts, 103, 7))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 104, 5))
>V : Symbol(V, Decl(conditionalTypes2.ts, 103, 9))
>E : Symbol(E, Decl(conditionalTypes2.ts, 103, 12))

// Repro from #23100

type A2<T, V, E> =
>A2 : Symbol(A2, Decl(conditionalTypes2.ts, 104, 82))
>T : Symbol(T, Decl(conditionalTypes2.ts, 108, 8))
>V : Symbol(V, Decl(conditionalTypes2.ts, 108, 10))
>E : Symbol(E, Decl(conditionalTypes2.ts, 108, 13))

    T extends object ? T extends any[] ? T : { [Q in keyof T]: A2<T[Q], V, E>; } : T;
>T : Symbol(T, Decl(conditionalTypes2.ts, 108, 8))
>T : Symbol(T, Decl(conditionalTypes2.ts, 108, 8))
>T : Symbol(T, Decl(conditionalTypes2.ts, 108, 8))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 109, 48))
>T : Symbol(T, Decl(conditionalTypes2.ts, 108, 8))
>A2 : Symbol(A2, Decl(conditionalTypes2.ts, 104, 82))
>T : Symbol(T, Decl(conditionalTypes2.ts, 108, 8))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 109, 48))
>V : Symbol(V, Decl(conditionalTypes2.ts, 108, 10))
>E : Symbol(E, Decl(conditionalTypes2.ts, 108, 13))
>T : Symbol(T, Decl(conditionalTypes2.ts, 108, 8))

type B2<T, V> =
>B2 : Symbol(B2, Decl(conditionalTypes2.ts, 109, 85))
>T : Symbol(T, Decl(conditionalTypes2.ts, 111, 8))
>V : Symbol(V, Decl(conditionalTypes2.ts, 111, 10))

    T extends object ? T extends any[] ? T : { [Q in keyof T]: B2<T[Q], V>; } : T;
>T : Symbol(T, Decl(conditionalTypes2.ts, 111, 8))
>T : Symbol(T, Decl(conditionalTypes2.ts, 111, 8))
>T : Symbol(T, Decl(conditionalTypes2.ts, 111, 8))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 112, 48))
>T : Symbol(T, Decl(conditionalTypes2.ts, 111, 8))
>B2 : Symbol(B2, Decl(conditionalTypes2.ts, 109, 85))
>T : Symbol(T, Decl(conditionalTypes2.ts, 111, 8))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 112, 48))
>V : Symbol(V, Decl(conditionalTypes2.ts, 111, 10))
>T : Symbol(T, Decl(conditionalTypes2.ts, 111, 8))

type C2<T, V, E> =
>C2 : Symbol(C2, Decl(conditionalTypes2.ts, 112, 82))
>T : Symbol(T, Decl(conditionalTypes2.ts, 114, 8))
>V : Symbol(V, Decl(conditionalTypes2.ts, 114, 10))
>E : Symbol(E, Decl(conditionalTypes2.ts, 114, 13))

    T extends object ? { [Q in keyof T]: C2<T[Q], V, E>; } : T;
>T : Symbol(T, Decl(conditionalTypes2.ts, 114, 8))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 115, 26))
>T : Symbol(T, Decl(conditionalTypes2.ts, 114, 8))
>C2 : Symbol(C2, Decl(conditionalTypes2.ts, 112, 82))
>T : Symbol(T, Decl(conditionalTypes2.ts, 114, 8))
>Q : Symbol(Q, Decl(conditionalTypes2.ts, 115, 26))
>V : Symbol(V, Decl(conditionalTypes2.ts, 114, 10))
>E : Symbol(E, Decl(conditionalTypes2.ts, 114, 13))
>T : Symbol(T, Decl(conditionalTypes2.ts, 114, 8))

// Repro from #28654

type MaybeTrue<T extends { b: boolean }> = true extends T["b"] ? "yes" : "no";
>MaybeTrue : Symbol(MaybeTrue, Decl(conditionalTypes2.ts, 115, 63))
>T : Symbol(T, Decl(conditionalTypes2.ts, 119, 15))
>b : Symbol(b, Decl(conditionalTypes2.ts, 119, 26))
>T : Symbol(T, Decl(conditionalTypes2.ts, 119, 15))

type T0 = MaybeTrue<{ b: never }>     // "no"
>T0 : Symbol(T0, Decl(conditionalTypes2.ts, 119, 78))
>MaybeTrue : Symbol(MaybeTrue, Decl(conditionalTypes2.ts, 115, 63))
>b : Symbol(b, Decl(conditionalTypes2.ts, 121, 21))

type T1 = MaybeTrue<{ b: false }>;    // "no"
>T1 : Symbol(T1, Decl(conditionalTypes2.ts, 121, 33))
>MaybeTrue : Symbol(MaybeTrue, Decl(conditionalTypes2.ts, 115, 63))
>b : Symbol(b, Decl(conditionalTypes2.ts, 122, 21))

type T2 = MaybeTrue<{ b: true }>;     // "yes"
>T2 : Symbol(T2, Decl(conditionalTypes2.ts, 122, 34))
>MaybeTrue : Symbol(MaybeTrue, Decl(conditionalTypes2.ts, 115, 63))
>b : Symbol(b, Decl(conditionalTypes2.ts, 123, 21))

type T3 = MaybeTrue<{ b: boolean }>;  // "yes"
>T3 : Symbol(T3, Decl(conditionalTypes2.ts, 123, 33))
>MaybeTrue : Symbol(MaybeTrue, Decl(conditionalTypes2.ts, 115, 63))
>b : Symbol(b, Decl(conditionalTypes2.ts, 124, 21))

// Repro from #28824

type Union = 'a' | 'b';
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))

type Product<A extends Union, B> = { f1: A, f2: B};
>Product : Symbol(Product, Decl(conditionalTypes2.ts, 128, 23))
>A : Symbol(A, Decl(conditionalTypes2.ts, 129, 13))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>B : Symbol(B, Decl(conditionalTypes2.ts, 129, 29))
>f1 : Symbol(f1, Decl(conditionalTypes2.ts, 129, 36))
>A : Symbol(A, Decl(conditionalTypes2.ts, 129, 13))
>f2 : Symbol(f2, Decl(conditionalTypes2.ts, 129, 43))
>B : Symbol(B, Decl(conditionalTypes2.ts, 129, 29))

type ProductUnion = Product<'a', 0> | Product<'b', 1>;
>ProductUnion : Symbol(ProductUnion, Decl(conditionalTypes2.ts, 129, 51))
>Product : Symbol(Product, Decl(conditionalTypes2.ts, 128, 23))
>Product : Symbol(Product, Decl(conditionalTypes2.ts, 128, 23))

// {a: "b"; b: "a"}
type UnionComplement = {
>UnionComplement : Symbol(UnionComplement, Decl(conditionalTypes2.ts, 130, 54))

  [K in Union]: Exclude<Union, K>
>K : Symbol(K, Decl(conditionalTypes2.ts, 134, 3))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>K : Symbol(K, Decl(conditionalTypes2.ts, 134, 3))

};
type UCA = UnionComplement['a'];
>UCA : Symbol(UCA, Decl(conditionalTypes2.ts, 135, 2))
>UnionComplement : Symbol(UnionComplement, Decl(conditionalTypes2.ts, 130, 54))

type UCB = UnionComplement['b'];
>UCB : Symbol(UCB, Decl(conditionalTypes2.ts, 136, 32))
>UnionComplement : Symbol(UnionComplement, Decl(conditionalTypes2.ts, 130, 54))

// {a: "a"; b: "b"}
type UnionComplementComplement = {
>UnionComplementComplement : Symbol(UnionComplementComplement, Decl(conditionalTypes2.ts, 137, 32))

  [K in Union]: Exclude<Union, Exclude<Union, K>>
>K : Symbol(K, Decl(conditionalTypes2.ts, 141, 3))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>K : Symbol(K, Decl(conditionalTypes2.ts, 141, 3))

};
type UCCA = UnionComplementComplement['a'];
>UCCA : Symbol(UCCA, Decl(conditionalTypes2.ts, 142, 2))
>UnionComplementComplement : Symbol(UnionComplementComplement, Decl(conditionalTypes2.ts, 137, 32))

type UCCB = UnionComplementComplement['b'];
>UCCB : Symbol(UCCB, Decl(conditionalTypes2.ts, 143, 43))
>UnionComplementComplement : Symbol(UnionComplementComplement, Decl(conditionalTypes2.ts, 137, 32))

// {a: Product<'b', 1>; b: Product<'a', 0>}
type ProductComplement = {
>ProductComplement : Symbol(ProductComplement, Decl(conditionalTypes2.ts, 144, 43))

  [K in Union]: Exclude<ProductUnion, { f1: K }>
>K : Symbol(K, Decl(conditionalTypes2.ts, 148, 3))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>ProductUnion : Symbol(ProductUnion, Decl(conditionalTypes2.ts, 129, 51))
>f1 : Symbol(f1, Decl(conditionalTypes2.ts, 148, 39))
>K : Symbol(K, Decl(conditionalTypes2.ts, 148, 3))

};
type PCA = ProductComplement['a'];
>PCA : Symbol(PCA, Decl(conditionalTypes2.ts, 149, 2))
>ProductComplement : Symbol(ProductComplement, Decl(conditionalTypes2.ts, 144, 43))

type PCB = ProductComplement['b'];
>PCB : Symbol(PCB, Decl(conditionalTypes2.ts, 150, 34))
>ProductComplement : Symbol(ProductComplement, Decl(conditionalTypes2.ts, 144, 43))

// {a: Product<'a', 0>; b: Product<'b', 1>}
type ProductComplementComplement = {
>ProductComplementComplement : Symbol(ProductComplementComplement, Decl(conditionalTypes2.ts, 151, 34))

  [K in Union]: Exclude<ProductUnion, Exclude<ProductUnion, { f1: K }>>
>K : Symbol(K, Decl(conditionalTypes2.ts, 155, 3))
>Union : Symbol(Union, Decl(conditionalTypes2.ts, 124, 36))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>ProductUnion : Symbol(ProductUnion, Decl(conditionalTypes2.ts, 129, 51))
>Exclude : Symbol(Exclude, Decl(lib.es5.d.ts, --, --))
>ProductUnion : Symbol(ProductUnion, Decl(conditionalTypes2.ts, 129, 51))
>f1 : Symbol(f1, Decl(conditionalTypes2.ts, 155, 61))
>K : Symbol(K, Decl(conditionalTypes2.ts, 155, 3))

};
type PCCA = ProductComplementComplement['a'];
>PCCA : Symbol(PCCA, Decl(conditionalTypes2.ts, 156, 2))
>ProductComplementComplement : Symbol(ProductComplementComplement, Decl(conditionalTypes2.ts, 151, 34))

type PCCB = ProductComplementComplement['b'];
>PCCB : Symbol(PCCB, Decl(conditionalTypes2.ts, 157, 45))
>ProductComplementComplement : Symbol(ProductComplementComplement, Decl(conditionalTypes2.ts, 151, 34))

// Repros from #27118

type MyElement<A> = [A] extends [[infer E]] ? E : never;
>MyElement : Symbol(MyElement, Decl(conditionalTypes2.ts, 158, 45))
>A : Symbol(A, Decl(conditionalTypes2.ts, 162, 15))
>A : Symbol(A, Decl(conditionalTypes2.ts, 162, 15))
>E : Symbol(E, Decl(conditionalTypes2.ts, 162, 39))
>E : Symbol(E, Decl(conditionalTypes2.ts, 162, 39))

function oops<A, B extends A>(arg: MyElement<A>): MyElement<B> {
>oops : Symbol(oops, Decl(conditionalTypes2.ts, 162, 56))
>A : Symbol(A, Decl(conditionalTypes2.ts, 163, 14))
>B : Symbol(B, Decl(conditionalTypes2.ts, 163, 16))
>A : Symbol(A, Decl(conditionalTypes2.ts, 163, 14))
>arg : Symbol(arg, Decl(conditionalTypes2.ts, 163, 30))
>MyElement : Symbol(MyElement, Decl(conditionalTypes2.ts, 158, 45))
>A : Symbol(A, Decl(conditionalTypes2.ts, 163, 14))
>MyElement : Symbol(MyElement, Decl(conditionalTypes2.ts, 158, 45))
>B : Symbol(B, Decl(conditionalTypes2.ts, 163, 16))

    return arg;  // Unsound, should be error
>arg : Symbol(arg, Decl(conditionalTypes2.ts, 163, 30))
}

type MyAcceptor<A> = [A] extends [[infer E]] ? (arg: E) => void : never;
>MyAcceptor : Symbol(MyAcceptor, Decl(conditionalTypes2.ts, 165, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 167, 16))
>A : Symbol(A, Decl(conditionalTypes2.ts, 167, 16))
>E : Symbol(E, Decl(conditionalTypes2.ts, 167, 40))
>arg : Symbol(arg, Decl(conditionalTypes2.ts, 167, 48))
>E : Symbol(E, Decl(conditionalTypes2.ts, 167, 40))

function oops2<A, B extends A>(arg: MyAcceptor<B>): MyAcceptor<A> {
>oops2 : Symbol(oops2, Decl(conditionalTypes2.ts, 167, 72))
>A : Symbol(A, Decl(conditionalTypes2.ts, 168, 15))
>B : Symbol(B, Decl(conditionalTypes2.ts, 168, 17))
>A : Symbol(A, Decl(conditionalTypes2.ts, 168, 15))
>arg : Symbol(arg, Decl(conditionalTypes2.ts, 168, 31))
>MyAcceptor : Symbol(MyAcceptor, Decl(conditionalTypes2.ts, 165, 1))
>B : Symbol(B, Decl(conditionalTypes2.ts, 168, 17))
>MyAcceptor : Symbol(MyAcceptor, Decl(conditionalTypes2.ts, 165, 1))
>A : Symbol(A, Decl(conditionalTypes2.ts, 168, 15))

    return arg;  // Unsound, should be error
>arg : Symbol(arg, Decl(conditionalTypes2.ts, 168, 31))
}

type Dist<T> = T extends number ? number : string;
>Dist : Symbol(Dist, Decl(conditionalTypes2.ts, 170, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 172, 10))
>T : Symbol(T, Decl(conditionalTypes2.ts, 172, 10))

type Aux<A extends { a: unknown }> = A["a"] extends number ? number : string;
>Aux : Symbol(Aux, Decl(conditionalTypes2.ts, 172, 50))
>A : Symbol(A, Decl(conditionalTypes2.ts, 173, 9))
>a : Symbol(a, Decl(conditionalTypes2.ts, 173, 20))
>A : Symbol(A, Decl(conditionalTypes2.ts, 173, 9))

type Nondist<T> = Aux<{a: T}>;
>Nondist : Symbol(Nondist, Decl(conditionalTypes2.ts, 173, 77))
>T : Symbol(T, Decl(conditionalTypes2.ts, 174, 13))
>Aux : Symbol(Aux, Decl(conditionalTypes2.ts, 172, 50))
>a : Symbol(a, Decl(conditionalTypes2.ts, 174, 23))
>T : Symbol(T, Decl(conditionalTypes2.ts, 174, 13))

function oops3<T>(arg: Dist<T>): Nondist<T> {
>oops3 : Symbol(oops3, Decl(conditionalTypes2.ts, 174, 30))
>T : Symbol(T, Decl(conditionalTypes2.ts, 175, 15))
>arg : Symbol(arg, Decl(conditionalTypes2.ts, 175, 18))
>Dist : Symbol(Dist, Decl(conditionalTypes2.ts, 170, 1))
>T : Symbol(T, Decl(conditionalTypes2.ts, 175, 15))
>Nondist : Symbol(Nondist, Decl(conditionalTypes2.ts, 173, 77))
>T : Symbol(T, Decl(conditionalTypes2.ts, 175, 15))

    return arg;  // Unsound, should be error
>arg : Symbol(arg, Decl(conditionalTypes2.ts, 175, 18))
}

